# .github/workflows/ci.yml
name: Build & Release UnrealLibretro

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*'

################################################################################
# Global settings
################################################################################
env:
  PLUGIN_NAME: UnrealLibretro
  ENGINE_REPO: EpicGames/UnrealEngine       # do not fork â€“ keep the original
  CACHE_VERSION: v1                        # bump to invalidate all caches

permissions:
  contents: write          # needed for create-release / upload-asset
  id-token: write          # required for OIDC token-exchange (built-in auth)

################################################################################
# Build & package job
################################################################################
jobs:
  build:
    runs-on: windows-2022                     # public Windows runner
    timeout-minutes: 360                     # GH hosted limit
    strategy:
      matrix:
        ue_version: [ "4.27", "5.1", "5.2", "5.3" ]  # extend as needed

    steps:
    #---------------------------------------------------------------------------
    # 0. Get plugin source
    #---------------------------------------------------------------------------
    - name: Checkout plugin
      uses: actions/checkout@v4

    #---------------------------------------------------------------------------
    # 1. Pull (or restore) the Engine source
    #    We cache the *built* engine folder so that subsequent runs are cheap.
    #---------------------------------------------------------------------------
    - name: Restore cached Engine
      id: cache-engine
      uses: actions/cache@v4
      with:
        path: ${{ runner.workspace }}/UE_${{ matrix.ue_version }}
        key: UE${{ matrix.ue_version }}-${{ runner.os }}-${{ env.CACHE_VERSION }}

    - name: Checkout Unreal Engine
      if: steps.cache-engine.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{ env.ENGINE_REPO }}
        ref: ${{ matrix.ue_version }}
        # The PAT stored in the secret must be able to see the EpicGames org
        token: ${{ secrets.EPIC_GH_TOKEN }}
        lfs: true
        submodules: recursive
        fetch-depth: 1
        path: UE_${{ matrix.ue_version }}

    #---------------------------------------------------------------------------
    # 2. Run the normal Unreal Engine bootstrap the *first* time
    #---------------------------------------------------------------------------
    - name: Run Setup.bat (dependencies download)
      if: steps.cache-engine.outputs.cache-hit != 'true'
      working-directory: UE_${{ matrix.ue_version }}
      shell: powershell
      run: .\Setup.bat --include-optional

    - name: GenerateProjectFiles
      if: steps.cache-engine.outputs.cache-hit != 'true'
      working-directory: UE_${{ matrix.ue_version }}
      shell: powershell
      run: .\GenerateProjectFiles.bat -game -engine

    #---------------------------------------------------------------------------
    # 3. Build *only what is strictly necessary* for building plugins
    #    We compile the "ShaderCompileWorker" and a stub editor target once.
    #---------------------------------------------------------------------------
    - name: Minimal Engine build
      if: steps.cache-engine.outputs.cache-hit != 'true'
      working-directory: UE_${{ matrix.ue_version }}
      shell: powershell
      run: >
        .\Engine\Build\BatchFiles\Build.bat
        ShaderCompileWorker Win64 Development ^
        -project="$(pwd)\Engine\Engine.uproject"

    #---------------------------------------------------------------------------
    # 4. Build and package the plugin
    #---------------------------------------------------------------------------
    - name: Build plugin (UAT BuildPlugin)
      working-directory: UE_${{ matrix.ue_version }}
      shell: powershell
      run: >
        .\Engine\Build\BatchFiles\RunUAT.bat BuildPlugin
        -Plugin="$env:GITHUB_WORKSPACE\${{ env.PLUGIN_NAME }}.uplugin"
        -Package="$env:RUNNER_TEMP\${{ env.PLUGIN_NAME }}-${{ matrix.ue_version }}"
        -TargetPlatforms=Win64
        -Rocket -Clean

    #---------------------------------------------------------------------------
    # 5. Upload artefact when building branches (CI)
    #---------------------------------------------------------------------------
    - name: Upload build artefact
      if: startsWith(github.ref, 'refs/heads/')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLUGIN_NAME }}-${{ matrix.ue_version }}
        path: ${{ runner.temp }}/${{ env.PLUGIN_NAME }}-${{ matrix.ue_version }}

    #---------------------------------------------------------------------------
    # 6. Release section (only when a tag vX.Y.Z is pushed)
    #---------------------------------------------------------------------------
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ runner.temp }}\${{ env.PLUGIN_NAME }}-${{ matrix.ue_version }}.zip
        asset_name: ${{ env.PLUGIN_NAME }}-${{ matrix.ue_version }}.zip
        asset_content_type: application/zip
