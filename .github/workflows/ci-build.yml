name: CI Build

on: [push]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install dependencies for GUI build
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          tcc \
          libgl1-mesa-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxfixes-dev \
          libasound2-dev
    - name: Configure CMake (Linux GCC)
      run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
    - name: Build (GCC)
      run: cmake --build build --parallel
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: netarch-linux-amd64
        path: build/netarch

    - name: Build with TCC (Portability Check)
      run: |
        tcc -c Source/ThirdParty/netarch/sam2.c \
        -ISource/UnrealLibretro/Private \
        -ISource/ThirdParty/zstd/lib \
        -ISource/ThirdParty/libjuice/include \
        -ISource/ThirdParty/libuv/include \
        -ISource/ThirdParty/reliable

  build-macos-x86_64:
    runs-on: macos-13 # Intel runner
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Configure CMake (macOS x86_64)
      run: |
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_OSX_ARCHITECTURES="x86_64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0" # Or your desired minimum
    - name: Build (macOS x86_64)
      run: cmake --build build --parallel
    - name: Upload macOS x86_64 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: netarch-macos-x86_64
        path: build/netarch
        if-no-files-found: error

  build-macos-arm64:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Configure CMake (macOS arm64)
      run: |
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_OSX_ARCHITECTURES="arm64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0" # Keep consistent
    - name: Build (macOS arm64)
      run: cmake --build build --parallel
    - name: Upload macOS arm64 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: netarch-macos-arm64 # Specific name for this arch
        path: build/netarch
        if-no-files-found: error

  create-macos-universal:
    runs-on: macos-latest # Any macOS runner is fine, it just needs 'lipo'
    needs: [build-macos-x86_64, build-macos-arm64]
    steps:
    - name: Download x86_64 artifact
      uses: actions/download-artifact@v4
      with:
        name: netarch-macos-x86_64
        path: build/x86_64
    - name: Download arm64 artifact
      uses: actions/download-artifact@v4
      with:
        name: netarch-macos-arm64
        path: build/arm64
    - name: List downloaded files
      run: |
        ls -lR build/x86_64
        ls -lR build/arm64
    - name: Create Universal Binary
      run: |
        mkdir -p build/universal # Create a directory for the universal binary
        lipo -create \
          build/x86_64/netarch \
          build/arm64/netarch \
          -output build/universal/netarch
    - name: Verify Universal Binary
      run: |
        echo "--- File type information (Universal) ---"
        file build/universal/netarch
        lipo -info build/universal/netarch
    - name: Upload macOS Universal Artifact
      uses: actions/upload-artifact@v4
      with:
        name: netarch-macos-universal
        path: build/universal/netarch

  build-windows:
    runs-on: windows-2025 # Fixes issue with SDL that exists as of windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Configure CMake (Windows MSVC)
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build
      run: cmake --build build --config Debug --parallel
    - name: List Windows Build Directory Contents
      run: |
        echo "--- Contents of ./build directory (recursive) on Windows ---"
        Get-ChildItem -Path build -Recurse
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: netarch-windows-amd64
        path: build/Debug/netarch.exe
